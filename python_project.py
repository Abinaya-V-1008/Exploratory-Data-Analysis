# -*- coding: utf-8 -*-
"""python project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ye0lh93GWYu2hx1gM6g054qtOdrnV1H-
"""

import pandas as pd
import numpy as np
from calendar import month
from matplotlib.pyplot import axis

#get data
from google.colab import drive
drive.mount('/content/drive')

f=open("/content/drive/MyDrive/Bakery Sales.csv","r")
df = pd.read_csv(f)
f.close()

df=df.fillna(0)
#make additional columns
#total items in transaction
df["nr_items"]=df.iloc[:,5:28].sum(axis=1)

#to buy drink and pastry
#total drinks in transaction.
df["drinks"]=df["americano"]+df["caffe latte"]+df["milk tea"]+df["vanila latte"]+df["berry ade"]+df["lemon ade"]+df["cacao deep"]
df["non_drinks"]=df["nr_items"]-df["drinks"]

#checking if drinks are bought
df["has_drinks"]=np.where(df["drinks"]>0,True,False)
print(df)
#checking if pastry is bought
df["has_non_drinks"]=np.where(df["non_drinks"]>0,True,False)
#checking if both are bought
df["has_both"]=np.where(np.logical_and(df["has_drinks"],df["has_non_drinks"]),True,False)

print(df)

#sweet food and savory food
#sweet & drinks combination
df["sweet"]=df["croissant"]+df["pain au chocolat"]+df["jam"]+df["tiramisu croissant"]+df["almond croissant"]+df["gateau chocolat"]+df["pandoro"]+df["cheese cake"]+df["orange pound"]+df["tiramisu"]+df["merinque cookies"]
df["savory"]=df["non_drinks"]-df["sweet"]

#split date into month, year, before/after 12
#To find which is the best sales time of the day 
df["month"]=pd.DatetimeIndex(df["datetime"]).month
df["year"]=pd.DatetimeIndex(df["datetime"]).year
df["hour"]=pd.DatetimeIndex(df["datetime"]).hour
df["date"]=pd.DatetimeIndex(df["datetime"]).date
df["day"]=pd.DatetimeIndex(df["datetime"]).day
df['time_of_day'] = np.where(df['hour']<= 12, 'morning', 'afternoon')
print(df)

from scipy import stats
#eliminate extreme values for total and for nr_items
df["zscore"]=np.abs(stats.zscore(df["total"]))
df["zscorenritems"]=np.abs(stats.zscore(df["nr_items"]))
print(df)
df=df.loc[df["zscore"]<=3]
df=df.loc[df["zscorenritems"]<=3]
df.drop(columns=["zscore","zscorenritems"],inplace=True)

#eliminate 22 and 23 :00 ,Tuesday

df=df.loc[df["day of week"]!="Tues"]

df=df.loc[df["hour"]!=23]
df=df.loc[df["hour"]!=22]
print(df)

#eliminate empty transactions (number of items =0)
df=df.loc[df["nr_items"]>0.0]
#show mean and median of total and nr of items
mediana=df["total"].median()
print(f"Median value of bill is: {mediana:.0f}")
meana=df["total"].mean()
print(f"Average value of bill is: {meana:.0f}")

mediana=df["nr_items"].median()
print(f"Median number of items is: {mediana:.0f}")
meana=df["nr_items"].mean()
print(f"Average number of items: {meana:.0f}")

#generate grouped median info by place
dfplace=df.groupby('total', as_index=True)['nr_items'].median().astype(int)
df2=df.groupby('total', as_index=True).median().astype(int)
dfplace=pd.concat([dfplace,df2],axis=1)
print(df)

def newc (namecol):
    dfplace[namecol]=df.groupby('place', as_index=True)[namecol].median().astype(int)

newc("savory")
newc("sweet")
newc("drinks")
newc("hour")
print("\nMedian values per place:\n")
corel=df.corr()
print(corel)

import seaborn as sns
sns.set(rc = {'figure.figsize':(15,8)})
#generate heatmap to visually see any correlations
sns.heatmap(corel,xticklabels=corel.columns,yticklabels=corel.columns)

sns.set_theme(style="dark",palette="pastel")
#look at the transaction size (items) based on time of day
sns.countplot(y="nr_items",data=df,hue="time_of_day")

sns.displot(df, x="time_of_day",col="day of week",col_order=["Mon","Wed","Thur","Fri","Sat","Sun"])
sns.displot(df, x="hour",binwidth=4,col="day of week",col_order=["Mon","Wed","Thur","Fri","Sat","Sun"])

sns.displot(df, x="nr_items",binwidth=1,col="time_of_day",kde=True)
sns.displot(df, x="total",binwidth=2500,col="time_of_day",kde=True)

#generate reduced dataframe
dfr=df[["nr_items","total","time_of_day","drinks","non_drinks","sweet","savory"]]
print(dfr)
#show scatter plot data
#to find if there is any differences based on time of day
#sns.pairplot(data=dfr,kind="scatter",hue="time_of_day",palette="pastel")
print(df)

del df['place']
k=int(input("Enter no of top and least sales to be displayed : "))
print("Displaying top k Sales ")
df.nlargest(k, ['total'])

#k1=int(input("Enter no of least sales to be displayed : "))
print("Displaying Least k sales ")
df.nsmallest(k, ['total'])

date1=str(input("Enter date1\n"))
date2=str(input("Enter date2\n"))
df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')
mask=(df['date'] > date1 )&(df['date'] <date2)
df=df.loc[mask]
print (df)